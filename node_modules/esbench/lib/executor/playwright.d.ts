import type { BrowserContext, BrowserType, LaunchOptions, Route } from "playwright-core";
import { Executor, SuiteTask } from "../host/toolchain.js";
export declare const blankPageResponse: {
    headers: {
        "Content-Type": string;
        "Cross-Origin-Opener-Policy": string;
        "Cross-Origin-Embedder-Policy": string;
    };
    contentType: string;
    body: string;
};
export interface PlaywrightOptions extends LaunchOptions {
    /**
     * Define a map of files that can be accessed by web pages. By default,
     * only files in the build output dir of the current task can be sent to the page.
     *
     * If the suite needs to use files that does not copied to the out dir,
     * and cannot be resolved by the builtin transformer, you should add them to assets.
     *
     * When a request is received, the server will see if the prefix of the path of
     * the URL matches one of the keys of `assets`, and if it does, replace the prefix
     * with the corresponding value, which is then used as the path to the file.
     *
     * If multiple prefix matches, the longest takes precedence.
     * if there is no match, send the file from build output directory.
     *
     * @example
     * // Request "/foo*" will be resolved to path "<cwd>/test/fixtures*"
     * new WebRemoteExecutor({
     *     assets: { "/foo": "test/fixtures" }
     * });
     *
     * // In the suite, we can fetch the file "<cwd>/test/fixtures/data.json".
     * fetch("/foo/data.json");
     */
    assets?: Record<string, string>;
}
/**
 * Run suites on browser with Playwright driver.
 *
 * ESBench does not download browsers by default, you may need to specific
 * `executablePath` or run `npx playwright install`.
 *
 * @example
 * import { PlaywrightExecutor } from "esbench/host";
 * import { firefox } from "playwright-core";
 *
 * export default defineConfig({
 *     toolchains: [{
 *         Executors: [new PlaywrightExecutor(firefox)]
 *     }],
 * });
 */
export declare class PlaywrightExecutor implements Executor {
    private readonly resolveAsset;
    readonly type: BrowserType;
    readonly options?: LaunchOptions;
    context: BrowserContext;
    constructor(type: BrowserType, options?: PlaywrightOptions);
    get name(): string;
    start(): Promise<void>;
    close(): Promise<void>;
    execute(options: SuiteTask): Promise<void>;
    serve(root: string, path: string, route: Route): Promise<void>;
    executeInPage(task: SuiteTask, url: string): Promise<void>;
}
/**
 * Running benchmarks on the extension page, which allows calling the browser extension APIs.
 */
export declare class WebextExecutor extends PlaywrightExecutor {
    private readonly cleanDataDir;
    private dataDir?;
    /**
     * @param type Only support chromium.
     * @param dataDir Path to a User Data Directory, which stores browser session data like cookies and local storage.
     *                If omitted the data will be saved in a temporary directory.
     */
    constructor(type: BrowserType, dataDir?: string);
    get name(): string;
    close(): Promise<void>;
    start(): Promise<void>;
    execute(task: SuiteTask): Promise<void>;
    findChromiumExtensionId(name: string): Promise<string | null>;
}
