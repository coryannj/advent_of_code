import * as http from "node:http";
import { IncomingMessage, ServerResponse } from "node:http";
import * as https from "node:https";
import { Options as OpenOptions } from "open";
import { Executor, SuiteTask } from "../host/toolchain.js";
import { HostContext } from "../host/context.js";
export declare const htmlEntryHeaders: {
    "Content-Type": string;
    "Cross-Origin-Opener-Policy": string;
    "Cross-Origin-Embedder-Policy": string;
};
interface WebRemoteExecutorOptions extends https.ServerOptions {
    /**
     * The host parameter of `Server.listen`.
     */
    host?: string;
    /**
     * The port parameter of `Server.listen`.
     *
     * @default 14715
     */
    port?: number;
    /**
     * If set, the benchmarking page will automatically open in the browser
     * and closes after execution finished.
     */
    open?: OpenOptions;
    /**
     * Define a map of files that can be accessed by web pages. By default,
     * only files in the build output dir of the current task can be sent to the page.
     *
     * If the suite needs to use files that does not copied to the out dir,
     * and cannot be resolved by the builtin transformer, you should add them to assets.
     *
     * When a request is received, the server will see if the prefix of the path of
     * the URL matches one of the keys of `assets`, and if it does, replace the prefix
     * with the corresponding value, which is then used as the path to the file.
     *
     * If multiple prefix matches, the longest takes precedence.
     * if there is no match, send the file from build output directory.
     *
     * @example
     * // Request "/foo*" will be resolved to path "<cwd>/test/fixtures*"
     * new WebRemoteExecutor({
     *     assets: { "/foo": "test/fixtures" }
     * });
     *
     * // In the suite, we can fetch the file "<cwd>/test/fixtures/data.json".
     * fetch("/foo/data.json");
     */
    assets?: Record<string, string>;
}
/**
 * Benchmark on any device that has HTTP access to the machine!
 *
 * @see https://esbench.vercel.app/guide/toolchains#webremoteexecutor
 */
export default class WebRemoteExecutor implements Executor {
    private readonly options;
    private readonly resolveAsset;
    private server;
    private task?;
    /**
     * Create a new WebRemoteExecutor instance, if `options.key`
     * is set, it will create an HTTPS server.
     */
    constructor(options?: WebRemoteExecutorOptions);
    get name(): string;
    start(ctx: HostContext): Promise<import("child_process").ChildProcess | undefined>;
    close(): Promise<unknown>;
    execute(task: SuiteTask): void;
    handleRequest(request: IncomingMessage, response: ServerResponse): Promise<void | http.ServerResponse<http.IncomingMessage>>;
    sendFile(fullPath: string, response: ServerResponse): void;
}
export {};
