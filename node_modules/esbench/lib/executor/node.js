import { fileURLToPath, pathToFileURL } from "node:url";
import { join } from "node:path";
import { fork } from "node:child_process";
import { highestPriority } from "./process.js";
// Resolve the filename to generated JS for test.
const __filename = join(fileURLToPath(import.meta.url), "../../../lib/executor/node.js");
/**
 * Run suites in a new Node process, communicate with the host through IPC channel.
 *
 * This class aims to support legacy Node without the fetch API.
 */
export default class NodeExecutor {
    executable;
    env;
    args;
    process;
    constructor(options = {}) {
        this.executable = options.execPath;
        this.env = options.env;
        this.args = options.execArgv ?? [];
    }
    get name() {
        return "node";
    }
    close() {
        if (this.process?.pid) {
            this.process.kill();
        }
    }
    execute({ root, file, pattern, dispatch, reject }) {
        this.process?.kill();
        this.process = fork(__filename, {
            execArgv: this.args,
            stdio: "ignore",
            execPath: this.executable,
            env: {
                ...process.env,
                ...this.env,
                ES_BENCH_WORKER: "true",
            },
        });
        this.process.on("spawn", () => highestPriority(this.process.pid));
        this.process.on("message", dispatch);
        this.process.send({ root, pattern, file });
        this.process.on("exit", code => {
            if (code !== 0) {
                const args = JSON.stringify(this.args);
                reject(new Error(`Node execute Failed (${code}), execArgv=${args}`));
            }
        });
    }
}
if (process.env.ES_BENCH_WORKER === "true") {
    const postMessage = process.send.bind(process);
    process.once("message", async (message) => {
        const { root, file, pattern } = message;
        const module = pathToFileURL(join(root, "index.js"));
        const client = await import(module.href);
        await client.default(postMessage, file, pattern);
    });
}
//# sourceMappingURL=node.js.map