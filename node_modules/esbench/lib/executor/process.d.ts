import { ChildProcess } from "node:child_process";
import { Server } from "node:http";
import { Executor, SuiteTask } from "../host/toolchain.js";
import { HostContext } from "../host/context.js";
type GetCommand = (file: string) => string;
export declare function highestPriority(pid: number): void;
/**
 * Call an external JS runtime to run suites, the runtime must support the fetch API.
 */
export default class ProcessExecutor implements Executor {
    protected readonly env?: NodeJS.ProcessEnv;
    protected readonly getCommand: GetCommand;
    protected process: ChildProcess;
    protected server: Server;
    protected dispatch: (message: any) => void;
    protected tempDir: string;
    /**
     * Create new ProcessExecutor with a command line template.
     *
     * You can pass a string as argument, the entry file will append to the end,
     * or specific a function accept the entry filename and return the command line.
     *
     * @example
     * // Will execute command: `node --jitless .esbench-tmp/main.js`
     * new ProcessExecutor("node --jitless");
     *
     * // Will execute command: `bun .esbench-tmp/main.js --foo=bar`
     * new ProcessExecutor(file => `bun ${file} --foo=bar`);
     */
    constructor(command: string | GetCommand, env?: NodeJS.ProcessEnv);
    get name(): string;
    start(host: HostContext): Promise<any[]>;
    close(): void;
    execute(task: SuiteTask): void;
    /**
     * Get the code of the entry file that process will execute.
     */
    protected createEntry(task: SuiteTask): string;
    /**
     * Attach error handler to the process, and set the highest priority.
     */
    protected postprocess(task: SuiteTask): void;
}
export {};
