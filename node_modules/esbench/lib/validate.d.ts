import { Profiler, ProfilingContext } from "./profiling.js";
type EqualityFn = (a: any, b: any) => boolean;
type CheckFn<T> = (value: any, params: T) => void;
export interface ValidateOptions<T> {
    /**
     * Check the return value of cases, throw an error if it's invalid.
     */
    check?: CheckFn<T>;
    /**
     * Check to make sure the values returned by the function are equal.
     *
     * The value can be a function, or true means check with `===`.
     */
    equality?: boolean | EqualityFn;
}
export declare class ExecutionValidator implements Profiler {
    private readonly isEqual;
    private readonly check;
    constructor({ equality, check }: ValidateOptions<any>);
    /**
     * To catch errors as early as possible, we start a new workflow for the validator.
     */
    onStart(ctx: ProfilingContext): Promise<void>;
}
export {};
