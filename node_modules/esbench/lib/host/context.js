import chalk from "chalk";
import { normalizeConfig } from "./config.js";
import { RE_ANY, SharedModeFilter } from "../utils.js";
export const logLevelPriority = { debug: 0, info: 1, warn: 2, error: 3, off: 4 };
const colors = [chalk.cyan, chalk, chalk.yellow, chalk.redBright];
function resolveRE(pattern) {
    if (!pattern) {
        return RE_ANY;
    }
    return pattern instanceof RegExp ? pattern : new RegExp(pattern);
}
export class HostContext {
    config;
    filter;
    logHandler;
    previous = {};
    constructor(config, filter = {}) {
        this.config = normalizeConfig(config);
        this.filter = {
            builder: resolveRE(filter.builder),
            executor: resolveRE(filter.executor),
            file: filter.file,
            name: resolveRE(filter.name),
            shared: SharedModeFilter.parse(filter.shared),
        };
        const priority = logLevelPriority[this.config.logLevel];
        this.logHandler = (message, level) => {
            const i = logLevelPriority[level];
            if (i >= priority) {
                console[level](colors[i](message));
            }
        };
    }
    debug(message) {
        this.logHandler(message, "debug");
    }
    info(message) {
        this.logHandler(message, "info");
    }
    warn(message) {
        this.logHandler(message, "warn");
    }
    error(message) {
        this.logHandler(message, "error");
    }
}
//# sourceMappingURL=context.js.map