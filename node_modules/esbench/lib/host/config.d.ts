import { Awaitable } from "@kaciras/utilities/node";
import { ESBenchResult } from "../connect.js";
import { Builder, Executor, Nameable, ToolChainItem } from "./toolchain.js";
import { HostContext, LogLevel } from "./context.js";
export interface ESBenchConfig {
    /**
     * Which files will be run as benchmark suites uses which toolchains.
     *
     * @see https://esbench.vercel.app/guide/toolchains
     */
    toolchains?: ToolchainOptions[];
    /**
     * Choose dir that ESBench uses to save temporary files.
     *
     * @default ".esbench-tmp"
     */
    tempDir?: string;
    /**
     * Adjust console output verbosity.
     *
     * @default "debug"
     */
    logLevel?: LogLevel;
    /**
     * Choose whether or not to remove the temporary directory after benchmark.
     *
     * @default true
     */
    cleanTempDir?: boolean;
    /**
     * Specifies the path to a result file generated by `rawReporter`.
     * If it is defined, the difference between the current result will be displayed on the report.
     *
     * @default "node_modules/.esbench/result.json"
     * @see https://esbench.vercel.app/guide/comparison#previous-runs
     */
    diff?: string | null;
    /**
     * Defines a set of labels that will be added as variables to the
     * results of all suites, effective only for the start command.
     *
     * @see https://esbench.vercel.app/guide/cli#cross-os-benchmark
     */
    tags?: Record<string, string>;
    /**
     * Configure reporters for processing benchmark results.
     *
     * @default [
     *     textReporter(),
     *     rawReporter("node_modules/.esbench/result.json")
     * ]
     * @see https://esbench.vercel.app/guide/reporters#reporters
     */
    reporters?: Reporter[];
}
type ToolConfig<T> = Nameable<T> | undefined | null | false;
export interface ToolchainOptions {
    /**
     * The micromatch patterns ESBench uses to glob suite files.
     *
     * @default ["./benchmark/**\/*.[jt]s?(x)"]
     */
    include?: string[];
    /**
     * The micromatch glob patterns to ignore files.
     */
    exclude?: string[];
    /**
     * Specific a list of builder to transform source files before execution,
     * falsy values are ignored. Each build results as a new set of benchmarks.
     *
     * By default, it will perform no transform at all.
     */
    builders?: Array<ToolConfig<Builder>>;
    /**
     * With executors, you specify JS runtimes that ESBench execute your suites,
     * falsy values are ignored.
     *
     * By default, ESBench run your suites in the current context.
     */
    executors?: Array<ToolConfig<Executor>>;
}
/**
 * A reporter allows you to export results of your benchmark in different formats.
 *
 * @param result The result of all suites.
 * @param context An object contains utility functions and informational bits.
 */
export type Reporter = (result: ESBenchResult, context: HostContext) => Awaitable<unknown>;
/**
 * Type helper to mark the object as an ESBench config.
 */
export declare const defineConfig: (v: ESBenchConfig) => ESBenchConfig;
export type NormalizedConfig = Required<ESBenchConfig> & {
    toolchains: ToolChainItem[];
};
export declare function normalizeConfig(input: ESBenchConfig): NormalizedConfig;
export {};
