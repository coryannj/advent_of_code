import { Profiler, ProfilingContext } from "./profiling.js";
import { ParamsAny, ParamsDef } from "./suite.js";
import { CurveFn } from "./math.js";
export interface ComplexityOptions<T extends ParamsDef> {
    /**
     * Parameter name of the input size, the parameter must have at least 2 values,
     * and all values must be finite number.
     */
    param: keyof T;
    /**
     * Metric name of the case running time, typically "time", provided by TimeProfiler.
     */
    metric: string;
    /**
     * Using customized complexity curves, and builtin curves are ignored.
     *
     * @example
     * new ComplexityProfiler({
     *     param: "length",
     *     metric: "time",
     *     curves: {
     *         "O(N^4)": n => n ** 4,
     *         "O(loglogN)": n => Math.log(Math.log(n)),
     *     }
     * })
     */
    curves?: Record<string, CurveFn>;
}
export default class ComplexityProfiler implements Profiler {
    private readonly metric;
    private readonly param;
    private readonly curves;
    private index;
    private weights;
    constructor(options: ComplexityOptions<ParamsAny>);
    onStart(ctx: ProfilingContext): void;
    onFinish(ctx: ProfilingContext): void;
}
