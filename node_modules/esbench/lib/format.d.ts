import type { ForegroundColorName } from "chalk";
import { CellValue, SummaryTable } from "./table.js";
export interface FormatOptions {
    /**
     * How to apply style to cell, it is also the place for escaping.
     *
     * Values have associated colors in the table will be converted using
     * `stainer[color](value)`, others using `stainer(value)`.
     *
     * By default, it will just return the value as is.
     */
    stainer?: Stainer;
    /**
     * Allow values of columns in the same group to have different units.
     *
     * @default false
     * @example
     *    (flexUnit = true)       (flexUnit = false)
     * |   name |      time |   |   name |       time |
     * | -----: | --------: |   | -----: | ---------: |
     * | object | 938.45 ms |   | object |  938.45 ms |
     * |    map |    1.03 s |   |    map | 1031.22 ms |
     */
    flexUnit?: boolean;
}
export interface FormattedTable extends Array<string[]> {
    /**
     * Render this table to the source code of a Markdown table.
     *
     * @param stringLength Function to detect the length of cell content.
     */
    toMarkdown(stringLength?: (s: string) => number): string;
}
export type ANSIColor = Exclude<ForegroundColorName, "gray" | "grey">;
type Stainer = Record<ANSIColor, (str: string) => string> & {
    (str: string): string;
};
export interface MetricFormatter {
    unit?: string;
    fixed?(values: CellValue[]): FixedFormatter;
    format(value: CellValue): string;
}
export interface FixedFormatter {
    unit: string;
    scale: number;
    format(value: CellValue): string;
}
export declare function createFormatter(template?: string): MetricFormatter;
export default function format(input: SummaryTable, options?: FormatOptions): FormattedTable;
export {};
