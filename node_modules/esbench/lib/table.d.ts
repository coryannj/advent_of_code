import { ToolchainResult } from "./connect.js";
import { FlattedResult, Summary } from "./summary.js";
import { ANSIColor, FormatOptions } from "./format.js";
type RatioStyle = "value" | "percentage" | "trend";
type Outliers = "worst" | "best" | "all";
export interface SummaryTableOptions {
    /**
     * Show standard deviation (*.SD) columns in the table.
     *
     * @default true
     *
     * @example
     * textReporter({ stdDev: true })
     * | No. |      Name |    time | time.SD |
     * | --: | --------: | ------: | ------: |
     * |   0 | For-index | 0.37 ns | 0.01 ns |
     * |   1 |    For-of | 6.26 ns | 2.88 ns |
     */
    stdDev?: boolean;
    /**
     * By default, variables with only one value are omitted from the table.
     * Set to true to show all variables.
     *
     * @default false
     */
    showSingle?: boolean;
    /**
     * Show percentile columns in the table.
     *
     * @example
     * textReporter({ percentiles: [75, 99] })
     * | No. |   name |      time |  time.p75 | time.p99 |
     * | --: | -----: | --------: | --------: | -------: |
     * |   0 | object | 938.45 ms | 992.03 ms |   1.08 s |
     * |   1 |    map |    1.03 s |    1.07 s |    1.1 s |
     */
    percentiles?: number[];
    /**
     * Specifies which outliers should be removed from the distribution.
     *
     * @default "all"
     */
    outliers?: false | Outliers;
    /**
     * Using ratioStyle, we can override the style of the diff and the baseline column.
     *
     * @example
     *            "percentage"      "trend"       "value"
     *    time   | time.ratio | | time.ratio | | time.ratio |
     * 274.14 us |   +133.79% | |    233.79% | |      2.34x |
     *  19.82 us |    -83.10% | |     16.90% | |      0.17x |
     * 117.26 us |   baseline | |   baseline | |   baseline |
     *
     * @default "percentageâ€œ
     */
    ratioStyle?: RatioStyle;
}
export type CellValue = string | number | undefined;
type CellColor = ANSIColor | null;
type ColoredValue = CellValue | [CellValue, ANSIColor | null];
interface ColumnFactory {
    name: ColoredValue;
    format?: string;
    prepare?(cases: FlattedResult[]): void;
    getValue(data: FlattedResult): ColoredValue | undefined;
}
export declare class SummaryTable {
    readonly formats: Array<string | undefined>;
    readonly groupEnds: number[];
    readonly colors: CellColor[][];
    /**
     * Content of the table, the first row is header.
     */
    readonly cells: CellValue[][];
    readonly hints: string[];
    readonly warnings: string[];
    /**
     * Build SummaryTable of a suite from its benchmark result.
     *
     * @param result Results of the suite with toolchains.
     * @param diff Used to generate *.diff columns.
     * @param options The options, see its type for details.
     */
    static from(result: ToolchainResult[], diff?: ToolchainResult[], options?: SummaryTableOptions): SummaryTable;
    constructor(summary: Summary, columnDefs: ColumnFactory[]);
    /**
     * Format the table for better presentation, it will perform:
     * - Add an empty line between groups.
     * - Convert numeric values to string with units if possible.
     * - Apply colors to cells, using `options.stainer`.
     */
    format(options?: FormatOptions): import("./format.js").FormattedTable;
}
export {};
