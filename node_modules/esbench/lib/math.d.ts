export type OutlierMode = "upper" | "lower" | "all";
export declare class TukeyOutlierDetector {
    readonly lowerFence: number;
    readonly upperFence: number;
    /**
     * Create a new outlier detector using Tukey's Fences.
     *
     * @param values Sample array, muse be sorted.
     * @param k The K value.
     */
    constructor(values: number[], k?: number);
    isOutlier(value: number): boolean;
    /**
     * Creates a copy of the given array without outliers.
     *
     * @param values The array filter() was called upon.
     * @param mode Specifies which outliers should be removed from the distribution.
     */
    filter(values: number[], mode?: OutlierMode): number[];
}
export type CurveFn = (x: number) => number;
/**
 * Find the coefficient for the high-order term in the running time, by minimizing
 * the sum of squares of relative error, for the fitting curve given by the `fn`.
 *
 * Source project:
 * https://github.com/ismaelJimenez/cpp.leastsq/blob/master/src/minimal_leastsq.cpp#L66
 *
 * @param input Array containing the size of the benchmark tests.
 * @param time Array containing the times for the benchmark tests.
 * @param fn One variable equation function.
 */
export declare function minimalLeastSquare(input: number[], time: number[], fn: CurveFn): number;
type AlternativeHypothesis = "not equal" | "less" | "greater";
/**
 * Perform the Welch's t hypothesis test. return the P-Value.
 * If the samples don't have enough size or their variance are all zero, the result is NaN.
 */
export declare function welchTest(a: number[], b: number[], alt: AlternativeHypothesis): number;
export {};
