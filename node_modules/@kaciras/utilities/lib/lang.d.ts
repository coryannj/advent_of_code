export type ItemOfIterable<T> = T extends Iterable<infer E> ? E : T extends AsyncIterable<infer E> ? E : never;
export type Awaitable<T = unknown> = T | PromiseLike<T>;
export type OnFulfilled<T, R> = ((value: T) => R | PromiseLike<R>) | null;
export type OnRejected<R> = ((reason: any) => R | PromiseLike<R>) | null;
export declare const alwaysTrue: (..._: unknown[]) => true;
export declare const alwaysFalse: (..._: unknown[]) => false;
/** This function returns the first argument it receives. */
export declare const identity: <T>(v: T) => T;
export declare const noop: (..._: unknown[]) => void;
export declare const asyncNoop: (..._: unknown[]) => Promise<void>;
/**
 * In JavaScript, every async function is actually an AsyncFunction object.
 * https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction
 */
export declare const AsyncFunction: FunctionConstructor;
/**
 * Call a function silently. returns undefined if any error occurs.
 */
export declare function silentCall<T, A extends any[]>(fn: (...params: A) => T, ...args: A): T | undefined;
/**
 * Silence a Promise-like object. This is useful for avoiding non-harmful,
 * but potentially confusing "uncaught play promise" rejection error messages.
 *
 * @param value An object that may or may not be `Promise`-like.
 */
export declare function silencePromise(value: any): void;
type ClassOf<T> = Function & {
    prototype: T;
};
/**
 * Create a new instance with the `parent` as prototype and the `value` as child.
 *
 * # NOTES
 * If the parent is a constructor, it will not be called and just use its `prototype`.
 *
 * Does not support override getter-only properties.
 *
 * This function does not use `Object.setPrototypeOf` because it has bad performance.
 *
 * # Compare with Lodash _.create
 * This function auto-detect `prototype` of parent, lodash does not.
 *
 * @param parent Prototype of returned object.
 * @param value Provide properties for returned object.
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf
 */
export declare function createInstance<P extends object | null, C>(parent: P | ClassOf<P>, value: C): P extends null ? C : P & C;
export {};
