/**
 * Trigger a download for the blob, the function returns immediately,
 * no way to know if the user accept or not.
 *
 * @param blob The blob object to download.
 * @param name Filename，if not specified, use blob.name.
 */
export declare function saveFile(blob: Blob, name?: string): void;
/**
 * Open up a file picker dialog that allows the user to choose files.
 *
 * # Limitation
 * There is no way to detect the user clicked the cancel button,
 * if the user does，the returned Promise will never resolve.
 *
 * @param accept Defines the file types the file input should accept.
 * @param multiple Allows the user to select more than one file.
 * @param directory Should select directory instead of file?
 */
export declare function selectFile(accept: string, multiple?: boolean, directory?: boolean): Promise<FileList>;
type PointerMoveHandler = (e: PointerEvent, init: PointerEvent) => void;
/**
 * A helper function for implementing drag and move feature.
 *
 * @example
 * const handler = dragHandler((event, base) => {
 *     const dx = event.pageX - base.pageX;
 *     const dy = event.pageY - base.pageY;
 *     console.log(`Pointer Moved: (${dx}, ${dy})`);
 * });
 * element.addEventListener("pointerdown", handler);
 *
 * @param onMove function to be triggered on pointer move.
 * @return The "pointerdown" event listener to add to the element.
 */
export declare function dragHandler(onMove: PointerMoveHandler): (initEvent: PointerEvent) => void;
export {};
