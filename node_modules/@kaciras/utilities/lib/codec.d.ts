/**
 * Escape special characters in the given string of text,
 * such that it can be interpolated in HTML content.
 *
 * # Alternatives
 * To insert text into a DOM node, just assign `textContent`.
 */
export declare function escapeHTML(html: string): string;
/**
 * Reverse conversion of `escapeHTML`.
 *
 * Don't assign to `innerHTML` and retrieve by `textContent`,
 * is takes match time to build a DOM tree.
 */
export declare function unescapeHTML(html: string): string;
/**
 * Escape an SVG string，make it available for data url, the result is more efficient than base64.
 *
 * Double quotes will be replaced with single quotes.
 *
 * @example
 * const dataUrl = "data:image/svg+xml," + svgToUrl(svg);
 *
 * @see https://codepen.io/tigt/post/optimizing-svgs-in-data-uris
 * @see https://www.zhangxinxu.com/wordpress/2018/08/css-svg-background-image-base64-encode/
 */
export declare function svgToUrl(svg: string): string;
/**
 * Convert the Blob to base64-encoded data url string。
 *
 * # Alternatives
 * If you don't need serialization, use `URL.createObjectURL` for better performance.
 */
export declare function blobToBase64URL(blob: Blob): Promise<string>;
/**
 * Create an Url-Safe Base64 encoded ASCII string from a binary data.
 *
 * @see https://developer.mozilla.org/en-US/docs/Glossary/Base64#the_unicode_problem
 */
export declare function base64url(buffer: BufferSource | Buffer): string;
/**
 * Apply a transform to the buffer, avoiding some of the pitfalls:
 *
 * - Many instances use `new Blob([buffer])` or `new Response(buffer)`, and they cause redundant data copying.
 *   See benchmark/buffer-stream.ts for performance comparison.
 *
 * - The Promise returned by `tx.writable.getWriter().write(buffer)` may not be fulfilled
 *   until `tx.readable` is read. But if you don't await for it, you'll miss the exception.
 *
 * @example
 * // Compress & decompress with deflate-raw algorithm.
 * const buffer = Buffer.from(...);
 * const compress = new CompressionStream("deflate-raw");
 * const decompress = new DecompressionStream("deflate-raw");
 *
 * const zipped = await transformBuffer(buffer, compress);
 * const unzipped = await transformBuffer(zipped, decompress);
 *
 * @param buffer The binary data to be transformed.
 * @param tx A transform stream should apply to the buffer.
 */
export declare function transformBuffer(buffer: BufferSource, tx: GenericTransformStream): Promise<Uint8Array>;
