type EllipsisPos = "begin" | "mid" | "end";
/**
 * Truncates a string, insert or append an ellipsis at any desired position
 * of the truncated result.
 *
 * # Alternatives
 * [smart-truncate](https://github.com/millerized/smart-truncate)
 *
 * @param value The long string to truncate.
 * @param length The length of the truncated result, must greater than 1.
 * @param position The position of the ellipsis mark inserted to.
 */
export declare function ellipsis(value: string, length: number, position?: EllipsisPos): string;
/**
 * Search numbers from the text and insert thousands separators to them.
 *
 * This function uses Lookbehind, which may not be supported by older browsers..
 * https://caniuse.com/js-regexp-lookbehind
 *
 * @example
 * separateThousand("ID: 5678, Price: 1234$");		// "ID: 5,678, Price: 1,234$"
 * separateThousand("var n = 1000000.2345", "_");	// "var n = 1_000_000.2345"
 *
 * @link https://stackoverflow.com/a/2901298
 */
export declare function separateThousand(text: string, separator?: string): string;
/**
 * Split command line string into arguments list and remove the quotes.
 * This function does not work with invalid quotes, such as `a"""b`.
 *
 * @example
 * splitCLI("node"); 				// ["node"]
 * splitCLI("node --foo");			// ["node", "--foo"]
 * splitCLI("");					// []
 *
 * splitCLI('"node --foo"');		// ["node --foo"]
 * splitCLI('"node" "--foo"');		// ["node", "--foo"]
 * splitCLI('node\\" \\"--foo');	// ['node"', '"--foo']
 * splitCLI('"node\\" \\"--foo"');	// ['node" "--foo']
 */
export declare function splitCLI(command: string): string[];
/**
 * Combine command line arguments into a string, with necessary quotes and special chars escaped.
 *
 * # Alternatives
 * You can wrap each argument with quote: `args.map(JSON.stringify).join(" ")`,
 * which is equivalent with this function for start processes, but more verbose.
 *
 * @example
 * buildCLI("node", "--foo");		// 'node --foo'
 * buildCLI("node", '--"foo"');		// 'node --\\"foo\\"'
 * buildCLI("node --foo");			// '"node --foo"'
 * buildCLI("node", "--foo=1 | 2");	// 'node "--foo=1 | 2"'
 * buildCLI();						// ''
 * buildCLI("");					// ''
 */
export declare function buildCLI(...args: string[]): string;
type Placeholders = Record<string, string | RegExp>;
/**
 * A simple string template engine, only support replace placeholders.
 *
 * It 10x faster than String.replaceAll() by splits the string ahead of time.
 *
 * # Alternatives
 * [mustache.js](https://github.com/janl/mustache.js)
 *
 * @example
 * const template = "<html><head></head><body></body></html>";
 * const newComposite = compositor(template, {
 * 		bodyAttrs: /(?<=<body.*?)(?=>)/s,
 * 		appHtml: /(?<=<body.*?>).*(?=<\/body>)/s,
 * });
 *
 * const c = newComposite();
 * c.put("appHtml", "<div id='app'>...</div>");
 * c.put("bodyAttrs", " class='ssr dark'");
 * return composite.toString();
 *
 * @param template The template string
 * @param placeholders An object contains placeholders with its name as key.
 */
export declare function compositor<T extends Placeholders>(template: string, placeholders: T): () => Composite<T>;
export declare class Composite<T extends Placeholders> {
    private readonly nameToSlot;
    private readonly parts;
    constructor(nameToSlot: Map<keyof T, number>, parts: string[]);
    toString(): string;
    put(name: keyof T, value: string): void;
}
export {};
