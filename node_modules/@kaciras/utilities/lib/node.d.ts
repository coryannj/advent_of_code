export * from "./collection.ts";
export * from "./codec.ts";
export * from "./crypto.ts";
export * from "./event.ts";
export * from "./fetch.ts";
export * from "./format.ts";
export * from "./lang.ts";
export * from "./misc.ts";
export * from "./unit.ts";
export * as RPC from "./rpc.ts";
export { default as LRUCache } from "./LRUCache.ts";
type Signals = NodeJS.Signals;
/**
 * Add exit listener to be called when process receive terminating signals.
 *
 * When receive double event, for example Ctrl-C is pressed twice,
 * the process will exit immediately and code will be process.exitCode or 1.
 *
 * # Alternatives
 * [node-graceful](https://github.com/mrbar42/node-graceful)
 *
 * @param listener listener function
 * @see https://nodejs.org/dist/latest/docs/api/process.html#signal-events
 */
export declare function onExit(listener: (signal: Signals) => unknown): () => void;
/**
 * Expose gc() function to global without any Node arguments requirement.
 * Note: --expose-gc cannot be passed through NODE_OPTIONS.
 *
 * Inspired by https://github.com/legraphista/expose-gc, The project
 * missing undo for changed flags, so we implemented it ourselves.
 */
export declare function exposeGC(): void;
/**
 * Import the default export of a module uses file path from CWD.
 * The most common case is loading a configuration file.
 *
 * - If `module` is supplied, it will be treated as a required module,
 *   so non-existent file will throw an error.
 *
 * - if `module` is undefined, it will load module from defaults in order
 *   and just ignore files that not found.
 *
 * - If both parameters are undefined, then returns undefined.
 *
 * @param module Path of the file to load.
 * @param defaults Fallback paths used if the module is undefined.
 */
export declare function importCWD(module: string | undefined, defaults?: string[]): Promise<any>;
