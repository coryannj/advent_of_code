import process from 'node:process';
import { pathToFileURL, fileURLToPath } from 'node:url';
import { statSync } from 'node:fs';
import { runInNewContext } from 'node:vm';
import { setFlagsFromString } from 'node:v8';
export { AESHelper, AsyncFunction, Composite, FetchClient, FetchClientError, LRUCache, MultiEventEmitter, MultiMap, NeverAbort, rpc as RPC, ResponseFacade, SingleEventEmitter, UniqueMultiMap, UnitConvertor, alwaysFalse, alwaysTrue, asyncNoop, base64url, blobToBase64URL, buildCLI, cartesianArray, cartesianObject, compositor, createInstance, dataSizeIEC, dataSizeSI, decimalPrefix, durationFmt, ellipsis, escapeHTML, fetchFile, firstItem, getCached, identity, noop, pathPrefix, pathSuffix, pubSub2ReqRes, separateThousand, sha256, silencePromise, silentCall, sleep, splitCLI, svgToUrl, transformBuffer, unescapeHTML, uniqueId } from './LRUCache.js';

const exitSignals = [
    "SIGTERM",
    "SIGINT",
    "SIGQUIT",
    "SIGHUP",
    "SIGBREAK"
];
function onExit(listener) {
    let exiting = false;
    function handle(signal) {
        if (exiting) {
            process.exit(process.exitCode ?? 1);
        } else {
            exiting = true;
            listener(signal);
        }
    }
    for (const signal of exitSignals){
        process.on(signal, handle);
    }
    return ()=>exitSignals.forEach((s)=>process.off(s, handle));
}
function exposeGC() {
    if (global.gc) {
        return;
    }
    setFlagsFromString("--expose_gc");
    global.gc = runInNewContext("gc");
    setFlagsFromString("--no-expose-gc");
}
function isFileSync(path) {
    try {
        return statSync(fileURLToPath(path)).isFile();
    } catch  {
        return false;
    }
}
async function importCWD(module, defaults) {
    if (module) {
        const url = pathToFileURL(module).toString();
        return (await import(url)).default;
    }
    for (const file of defaults ?? []){
        const { href } = pathToFileURL(file);
        try {
            return (await import(href)).default;
        } catch (e) {
            if (e.code !== "ERR_MODULE_NOT_FOUND" && e.code !== "MODULE_NOT_FOUND" || isFileSync(import.meta.resolve(href))) {
                throw e;
            }
        }
    }
}

export { exposeGC, importCWD, onExit };
