/**
 * Detect if the pointer is inside the element.
 *
 * @example
 * const dialog = document.querySelector("dialog");
 * dialog.showModal();
 * dialog.onclick = e => {
 *     if (!isPointerInside(e)) dialog.close();
 * };
 *
 * @param event You can only get pointer position in event handler.
 * @param el The element to check. if not present, use event.currentTarget.
 * @see https://stackoverflow.com/q/2601097/7065321
 */
export declare function isPointerInside(event: MouseEvent, el?: Element): boolean;
/**
 * Swap locations of `nodeA` and `nodeB` in the DOM.
 *
 * @see https://stackoverflow.com/a/10717422/7065321
 */
export declare function swapElements(nodeA: Element, nodeB: Element): void;
/**
 * Gets the element's index among all children of its parent.
 * Throw an error if the element does not have a parent.
 *
 * @param el The DOM element.
 * @param from The array index at which to begin the search, default 0.
 * @return The first index of the element in the array; -1 if not found.
 */
export declare function nthInChildren(el: Node, from?: number): number;
/**
 * Reorder elements using drag-and-drop. Elements must be children of same parent.
 *
 * This function creates a "Drag context". Elements registered in the
 * same context can drag to swap with each other.
 *
 * You need add draggable="true" to the element if it is not default draggable.
 *
 * # Sort cross different parent?
 * It's hard to decision insert before or after to target element. One solution is to
 * calculate the pointer is in the first half or the second half of the target,
 * but this is hard to implement and cannot handle the new added CSS property.
 *
 * https://github.com/SortableJS/Sortable/blob/7af63fdc5d7512e7f0b8abb10970d473521b31a5/src/Sortable.js#L161
 *
 * # Alternatives
 * [Sortable](https://github.com/SortableJS/Sortable)
 *
 * @example
 * const context = dragSortContext();
 * const list = document.querySelectorAll(".sort-list > a")
 * for (const link of list){
 *     context.register(link);
 * }
 *
 * @param swap true to swap items with eachother rather than sorted.
 */
export declare function dragSortContext(swap?: boolean): {
    register(element: GlobalEventHandlers): void;
    unregister(element: GlobalEventHandlers): void;
};
