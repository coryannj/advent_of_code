import { join, resolve as resolvePath } from "path";
import { fileURLToPath } from "url";
import { parse, TSConfckCache } from "tsconfck";
export const tsconfigCache = new TSConfckCache();
export const aliasCache = new Map();
const EMPTY = [];
export async function getTSConfig(file) {
    const result = await parse(file, { cache: tsconfigCache });
    const { tsconfig, tsconfigFile } = result;
    if (!tsconfigFile) {
        return;
    }
    if (!aliasCache.has(tsconfigFile)) {
        const options = tsconfig.compilerOptions ??= {};
        const { paths, baseUrl = "" } = options;
        options.inlineSourceMap = true;
        options.removeComments = true;
        delete options.outDir;
        const root = resolvePath(tsconfigFile, "..", baseUrl);
        let maps;
        if (paths) {
            maps = PathAlias.parse(root, paths);
        }
        aliasCache.set(tsconfigFile, { root, maps });
        options.target &&= options.target.toLowerCase();
        options.module &&= options.module.toLowerCase();
    }
    return result;
}
class PathAlias {
    templates;
    prefix;
    suffix;
    constructor(root, key, list) {
        const parts = key.split("*");
        this.prefix = parts[0];
        this.suffix = parts[1];
        this.templates = list.map(p => join(root, p));
    }
    test(id) {
        const { prefix, suffix } = this;
        return suffix === undefined
            ? id === prefix
            : id.startsWith(prefix) && id.endsWith(suffix);
    }
    getPaths(id) {
        const { prefix, suffix, templates } = this;
        if (suffix === undefined) {
            return templates;
        }
        const s = id.slice(prefix.length, id.length - suffix.length);
        return templates.map(t => t.replace("*", s));
    }
    static parse(root, paths) {
        const alias = [];
        for (const [key, templates] of Object.entries(paths)) {
            alias.push(new PathAlias(root, key, templates));
        }
        return alias.sort((a, b) => b.prefix.length - a.prefix.length);
    }
}
export async function getAlias(id, parent) {
    if (/^\.{0,2}\//.test(id) ||
        !parent?.startsWith("file:") ||
        parent.includes("/node_modules/")) {
        return EMPTY;
    }
    const found = await getTSConfig(fileURLToPath(parent));
    if (!found) {
        return EMPTY;
    }
    const { compilerOptions } = found.tsconfig;
    const { maps, root } = aliasCache.get(found.tsconfigFile);
    const match = maps?.find(item => item.test(id));
    if (match) {
        return match.getPaths(id);
    }
    return compilerOptions.baseUrl ? [join(root, id)] : EMPTY;
}
//# sourceMappingURL=tsconfig.js.map